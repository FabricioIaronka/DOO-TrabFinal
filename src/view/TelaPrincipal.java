/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.ClienteController;
import controller.ProdutoController;
import controller.VendaController;
import exceptions.SaleInvalid;
import java.awt.Component;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.Cliente;
import model.ItemVenda;
import model.Produto;
import model.Usuario;
import model.Venda;


/**
 *
 * @author User
 */
public class TelaPrincipal extends javax.swing.JFrame {
    private List<Produto> listaEstoque;
    private List<Cliente> listaClientes;
    private List<Produto> carrinho;
    private Usuario user;
    private DefaultTableCellRenderer centerRender;
    
    
    public TelaPrincipal(Usuario user) {
        this.user = user;
        
        initComponents();
        this.setLocationRelativeTo(null);
        setScreenForUser();
        
        this.carrinho = new ArrayList<>();
        
        this.centerRender = new DefaultTableCellRenderer();
        this.centerRender.setHorizontalAlignment(SwingConstants.CENTER);

        centerIntOnTable();
        
        //ESTOQUE
        updateListaEstoque();
        //CLIENTE
        updateListaClientes();
        
        DefaultTableModel modelo = (DefaultTableModel) tabelaCarrinho.getModel();
        modelo.addTableModelListener(e -> {
        if (e.getType() == TableModelEvent.UPDATE) {
            calcularTotalCarrinho();
        }
    });
    }
    
    public void setScreenForUser() {
        if (!this.user.getNivel().equalsIgnoreCase("administrador")) {
            if (this.user.getNivel().equalsIgnoreCase("vendedor")){
                BotaoAddProd.setEnabled(false);
                BotaoEditar.setEnabled(false);
                BotaoDeletarProd.setEnabled(false);
            }
            else {
                for(Component c : jPanel1.getComponents()){
                    c.setVisible(false);
                }
                
                for(Component c : jPanel3.getComponents()){
                    c.setVisible(false);
                }
                
                for(Component c : jPanel4.getComponents()){
                    c.setVisible(false);
                }
            }
        }
    }

    public List<Produto> getListaEstoque() {
        return listaEstoque;
    }

    public void setListaEstoque(List<Produto> listaEstoque) {
        this.listaEstoque = listaEstoque;
    }

    public List<Produto> getCarrinho() {
        return carrinho;
    }

    public void setCarrinho(List<Produto> carrinho) {
        this.carrinho = carrinho;
    }
    

    public void centerIntOnTable() {
        int index = this.tabelaProd.getColumnModel().getColumnIndex("ID");
        this.tabelaProd.getColumnModel().getColumn(index).setCellRenderer(centerRender);
        
        index = this.tabelaProd.getColumnModel().getColumnIndex("Valor");
        this.tabelaProd.getColumnModel().getColumn(index).setCellRenderer(centerRender);
        
        index = this.tabelaProd.getColumnModel().getColumnIndex("Quantidade");
        this.tabelaProd.getColumnModel().getColumn(index).setCellRenderer(centerRender);
        
        index = this.tabelaClientes.getColumnModel().getColumnIndex("ID");
        this.tabelaClientes.getColumnModel().getColumn(index).setCellRenderer(centerRender);
        
        index = this.tabelaCarrinho.getColumnModel().getColumnIndex("ID");
        this.tabelaProd.getColumnModel().getColumn(index).setCellRenderer(centerRender);
        
        index = this.tabelaCarrinho.getColumnModel().getColumnIndex("Preço");
        this.tabelaProd.getColumnModel().getColumn(index).setCellRenderer(centerRender);
        
        index = this.tabelaCarrinho.getColumnModel().getColumnIndex("Quantidade");
        this.tabelaProd.getColumnModel().getColumn(index).setCellRenderer(centerRender);
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        BotaoAdiconar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaCarrinho = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        TextoTotal = new javax.swing.JTextField();
        BotaoFinalizar = new javax.swing.JButton();
        BotaoCancelar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        TextoCPF = new javax.swing.JFormattedTextField();
        TextoClienteCPF = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        TextoPesquisar = new javax.swing.JTextField();
        BotaoPesquisar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProd = new javax.swing.JTable();
        BotaoDeletarProd = new javax.swing.JButton();
        BotaoAddProd = new javax.swing.JButton();
        BotaoEditar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaRegistro = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        TextoPesquisar1 = new javax.swing.JTextField();
        BotaoPesquisarCliente = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaClientes = new javax.swing.JTable();
        BotaoDeletarCliente = new javax.swing.JButton();
        BotaoAddCliente = new javax.swing.JButton();
        BotaoEditarCliente = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        BotaoAdiconar.setBackground(new java.awt.Color(48, 131, 214));
        BotaoAdiconar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoAdiconar.setForeground(new java.awt.Color(255, 255, 255));
        BotaoAdiconar.setText("ADICIONAR PRODUTO");
        BotaoAdiconar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoAdiconarActionPerformed(evt);
            }
        });

        tabelaCarrinho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Descrição", "Preço", "Quantidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelaCarrinho);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Total (R$):");

        TextoTotal.setEditable(false);
        TextoTotal.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        TextoTotal.setForeground(new java.awt.Color(255, 255, 255));
        TextoTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextoTotalActionPerformed(evt);
            }
        });

        BotaoFinalizar.setBackground(new java.awt.Color(0, 204, 0));
        BotaoFinalizar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoFinalizar.setForeground(new java.awt.Color(0, 0, 0));
        BotaoFinalizar.setText("FINALIZAR");
        BotaoFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoFinalizarActionPerformed(evt);
            }
        });

        BotaoCancelar.setBackground(new java.awt.Color(234, 40, 40));
        BotaoCancelar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoCancelar.setForeground(new java.awt.Color(255, 255, 255));
        BotaoCancelar.setText("CANCELAR");
        BotaoCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoCancelarActionPerformed(evt);
            }
        });

        jLabel2.setText("CPF Cliente:");

        try {
            TextoCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            TextoClienteCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextoClienteCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BotaoAdiconar, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(BotaoCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(102, 102, 102)
                                        .addComponent(BotaoFinalizar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(114, 114, 114))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TextoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(143, 143, 143)
                    .addComponent(TextoCPF)
                    .addGap(144, 144, 144)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotaoAdiconar)
                    .addComponent(jLabel2)
                    .addComponent(TextoClienteCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TextoTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotaoFinalizar)
                    .addComponent(BotaoCancelar))
                .addGap(15, 15, 15))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(251, 251, 251)
                    .addComponent(TextoCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(255, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Venda", jPanel1);

        BotaoPesquisar.setBackground(new java.awt.Color(102, 102, 255));
        BotaoPesquisar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoPesquisar.setForeground(new java.awt.Color(255, 255, 255));
        BotaoPesquisar.setText("Pesquisar");
        BotaoPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoPesquisarActionPerformed(evt);
            }
        });

        tabelaProd.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Descrição", "Valor", "Quantidade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaProd);
        if (tabelaProd.getColumnModel().getColumnCount() > 0) {
            tabelaProd.getColumnModel().getColumn(0).setCellRenderer(null);
        }

        BotaoDeletarProd.setBackground(new java.awt.Color(234, 40, 40));
        BotaoDeletarProd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoDeletarProd.setForeground(new java.awt.Color(255, 255, 255));
        BotaoDeletarProd.setText("DELETAR");
        BotaoDeletarProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoDeletarProdActionPerformed(evt);
            }
        });

        BotaoAddProd.setBackground(new java.awt.Color(0, 204, 0));
        BotaoAddProd.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoAddProd.setForeground(new java.awt.Color(0, 0, 0));
        BotaoAddProd.setText("ADICIONAR");
        BotaoAddProd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoAddProdActionPerformed(evt);
            }
        });

        BotaoEditar.setBackground(new java.awt.Color(48, 131, 214));
        BotaoEditar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoEditar.setForeground(new java.awt.Color(255, 255, 255));
        BotaoEditar.setText("EDITAR");
        BotaoEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoEditarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Gerenciar Estoque");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(TextoPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotaoPesquisar))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(174, 174, 174)
                                .addComponent(jLabel3))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(BotaoDeletarProd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(BotaoEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(BotaoAddProd, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotaoPesquisar)
                    .addComponent(TextoPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotaoDeletarProd)
                    .addComponent(BotaoEditar)
                    .addComponent(BotaoAddProd))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Estoque", jPanel2);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Registro de Vendas");

        tabelaRegistro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "ID Usuario", "ID Cliente", "Data", "Valor Total (R$)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tabelaRegistro);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(46, 46, 46)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Registro", jPanel3);

        BotaoPesquisarCliente.setBackground(new java.awt.Color(102, 102, 255));
        BotaoPesquisarCliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoPesquisarCliente.setForeground(new java.awt.Color(255, 255, 255));
        BotaoPesquisarCliente.setText("Pesquisar");
        BotaoPesquisarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoPesquisarClienteActionPerformed(evt);
            }
        });

        tabelaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "Sobrenome", "Telefone", "Endereco", "CPF"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tabelaClientes);
        if (tabelaClientes.getColumnModel().getColumnCount() > 0) {
            tabelaClientes.getColumnModel().getColumn(0).setCellRenderer(null);
        }

        BotaoDeletarCliente.setBackground(new java.awt.Color(234, 40, 40));
        BotaoDeletarCliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoDeletarCliente.setForeground(new java.awt.Color(255, 255, 255));
        BotaoDeletarCliente.setText("DELETAR");
        BotaoDeletarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoDeletarClienteActionPerformed(evt);
            }
        });

        BotaoAddCliente.setBackground(new java.awt.Color(0, 204, 0));
        BotaoAddCliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoAddCliente.setForeground(new java.awt.Color(0, 0, 0));
        BotaoAddCliente.setText("ADICIONAR");
        BotaoAddCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoAddClienteActionPerformed(evt);
            }
        });

        BotaoEditarCliente.setBackground(new java.awt.Color(48, 131, 214));
        BotaoEditarCliente.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        BotaoEditarCliente.setForeground(new java.awt.Color(255, 255, 255));
        BotaoEditarCliente.setText("EDITAR");
        BotaoEditarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoEditarClienteActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Gerenciar Cliente");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(TextoPesquisar1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BotaoPesquisarCliente))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(174, 174, 174)
                                .addComponent(jLabel7))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(66, 66, 66)
                                .addComponent(BotaoDeletarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(BotaoEditarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(52, 52, 52)
                                .addComponent(BotaoAddCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotaoPesquisarCliente)
                    .addComponent(TextoPesquisar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotaoDeletarCliente)
                    .addComponent(BotaoEditarCliente)
                    .addComponent(BotaoAddCliente))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Clientes", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotaoEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoEditarActionPerformed
        int index = tabelaProd.getSelectedRow();
        
        if (index >= 0) {
            int id = (int) tabelaProd.getValueAt(index, 0);
            Produto prod = encontrarProdutoPorId(id);
        
            EditarProduto novoProd = new EditarProduto(this, prod);
            setFormCenter(novoProd);
            novoProd.setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(
                    this,
                    "Você precisa selecionar um produto para editá-lo",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
                );
        }
        
    }//GEN-LAST:event_BotaoEditarActionPerformed

    private void TextoTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextoTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextoTotalActionPerformed

    private void BotaoAdiconarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoAdiconarActionPerformed
        AdicionarCarrinho novaTelaCarrinho = new AdicionarCarrinho(this);
        setFormCenter(novaTelaCarrinho);
        novaTelaCarrinho.setVisible(true);
    }//GEN-LAST:event_BotaoAdiconarActionPerformed

    private void BotaoFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoFinalizarActionPerformed
        int opcao = JOptionPane.showConfirmDialog(
                this,
                "Tem certeza que deseja finalizar a venda?",
                "Finalizar venda",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );

        if (opcao == JOptionPane.YES_OPTION) {
            VendaController vc = new VendaController();

            List<ItemVenda> itensVenda = getProdutosDaTabela();
            Cliente cli = encontrarClientePorCPF(TextoClienteCPF.getText());
            
            double total = Double.parseDouble(TextoTotal.getText());
            System.out.println("ok");
            try {
                if (cli != null) {
                    vc.create(this.user.getId(), cli.getId(), total, itensVenda);
                }
                else{
                    vc.create(this.user.getId(), -1, total, itensVenda);
                }
                
                TextoClienteCPF.setText("");
                this.carrinho = new ArrayList<>();

                updateTabelaCarrinho();
            } 
            catch (SaleInvalid e) {
                JOptionPane.showMessageDialog(
                        this,
                        e.getMessage(),
                        "Erro ao adicionar a venda",
                        JOptionPane.ERROR_MESSAGE
                );
            } 
            catch (SQLException e) {
                JOptionPane.showMessageDialog(
                        this,
                        e.getMessage(),
                        "Erro no banco de dados",
                        JOptionPane.ERROR_MESSAGE
                );
            }
        }


    }//GEN-LAST:event_BotaoFinalizarActionPerformed

    private void BotaoAddProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoAddProdActionPerformed
        CadastrarProd novoProd = new CadastrarProd(this);
        setFormCenter(novoProd);
        novoProd.setVisible(true);    
    }//GEN-LAST:event_BotaoAddProdActionPerformed

    private void BotaoCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoCancelarActionPerformed
        int opcao = JOptionPane.showConfirmDialog(
                this,
                "Tem certeza que deseja cancelar a venda?",
                "Cancelar venda",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE
        );
        
        if (opcao == JOptionPane.YES_OPTION) {
            TextoClienteCPF.setText("");
            this.carrinho = new ArrayList<>();
            
            updateTabelaCarrinho();
            
            JOptionPane.showMessageDialog(
                this,
                "Venda cancelada",
                "Sucesso!",
                JOptionPane.INFORMATION_MESSAGE
            );
        }
    }//GEN-LAST:event_BotaoCancelarActionPerformed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        updateListaEstoque();
        updateListaClientes();
        updateTabelaVendas();
    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void BotaoDeletarProdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoDeletarProdActionPerformed
        int index = tabelaProd.getSelectedRow();
        if (index >= 0) {
            int id = (int) tabelaProd.getValueAt(index, 0);
            Produto prod = encontrarProdutoPorId(id);
            ProdutoController pc = new ProdutoController();
            
            try{
                pc.deleteProduto(prod.getId());
                
                updateListaEstoque();
                JOptionPane.showMessageDialog(
                this,
                "Produto excluido do estoque",
                "Sucesso!",
                JOptionPane.INFORMATION_MESSAGE
            );
            }
            catch (SQLException e){
                JOptionPane.showMessageDialog(
                    this,
                    e.getMessage(),
                    "Erro no banco de dados",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
        else {
            JOptionPane.showMessageDialog(
                    this,
                    "Você precisa selecionar um produto para excluí-lo",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
                );
        }
    }//GEN-LAST:event_BotaoDeletarProdActionPerformed

    private void BotaoPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoPesquisarActionPerformed
        String nome = TextoPesquisar.getText();
        updateListaEstoquePesquisa(nome);
    }//GEN-LAST:event_BotaoPesquisarActionPerformed

    private void BotaoPesquisarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoPesquisarClienteActionPerformed
        String nome = TextoPesquisar1.getText();
        updateListaClientesPesquisa(nome);
    }//GEN-LAST:event_BotaoPesquisarClienteActionPerformed

    private void BotaoDeletarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoDeletarClienteActionPerformed
        int index = tabelaClientes.getSelectedRow();
        if (index >= 0) {
            int id = (int) tabelaClientes.getValueAt(index, 0);
            Cliente cl = encontrarClientePorId(id);
            
            ClienteController cc = new ClienteController();
            
            try{
                cc.deleteProduto(cl.getId());
                
                updateListaClientes();
                
                JOptionPane.showMessageDialog(
                this,
                "Cliente excluido do sistema",
                "Sucesso!",
                JOptionPane.INFORMATION_MESSAGE
            );
            }
            catch (SQLException e){
                JOptionPane.showMessageDialog(
                    this,
                    e.getMessage(),
                    "Erro no banco de dados",
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
        else {
            JOptionPane.showMessageDialog(
                    this,
                    "Você precisa selecionar um cliente para excluí-lo",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
                );
        }
    }//GEN-LAST:event_BotaoDeletarClienteActionPerformed

    private void BotaoAddClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoAddClienteActionPerformed
        CadastrarCliente cadCli = new CadastrarCliente(this);
        setFormCenter(cadCli);
        cadCli.setVisible(true);
    }//GEN-LAST:event_BotaoAddClienteActionPerformed

    private void BotaoEditarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoEditarClienteActionPerformed
        int index = tabelaClientes.getSelectedRow();
        
        if (index >= 0) {
            int id = (int) tabelaClientes.getValueAt(index, 0);
            Cliente cl = encontrarClientePorId(id);
        
            EditarCliente cadCli = new EditarCliente(this, cl);
            setFormCenter(cadCli);
            cadCli.setVisible(true);
        }
        else {
            JOptionPane.showMessageDialog(
                    this,
                    "Você precisa selecionar um cliente para editá-lo",
                    "Erro",
                    JOptionPane.ERROR_MESSAGE
                );
        }
        
        
    }//GEN-LAST:event_BotaoEditarClienteActionPerformed
    
    private void setFormCenter(javax.swing.JFrame tela) {
        tela.setLocationRelativeTo(null);
    }
    
    private Produto encontrarProdutoPorId(int id) {
        for (Produto p : this.listaEstoque) {
            if (p.getId() == id) {
                return p;
            }
        }
        return null;
    }
    
    private Cliente encontrarClientePorId(int id) {
        for (Cliente c : this.listaClientes) {
            if (c.getId() == id) {
                return c;
            }
        }
        return null;
    }
    
    private Cliente encontrarClientePorCPF(String cpf) {
        for (Cliente c : this.listaClientes) {
            if (c.getCpf().equals(cpf)) {
                return c;
            }
        }
        return null;
    }
    
    private List<Venda> getVendas(){
        VendaController vc = new VendaController();
        try{
            return vc.getAll();
        }
        catch (SQLException e){
            JOptionPane.showMessageDialog(
                        this,
                        e.getMessage(),
                        "Erro no banco de dados",
                        JOptionPane.ERROR_MESSAGE
                );
            return null;
        }
    }
    
    private void updateTabelaVendas() {
        DefaultTableModel modelo = (DefaultTableModel) tabelaRegistro.getModel();
            modelo.setRowCount(0);

            for (Venda v : getVendas()) {
                modelo.addRow(new Object[]{
                    v.getId(),
                    v.getIdUsuario(),
                    v.getIdCliente(),
                    v.getData(),
                    v.getTotal()
                });
            }
    }
    
    // ESTOQUE UPDATES
    public void updateListaEstoque() {
        try {
            ProdutoController pc = new ProdutoController();
            this.listaEstoque = pc.getAll();
            
            updateTabelaEstoque();
        } 
        catch (SQLException e) {
            JOptionPane.showMessageDialog(
                    this,
                    e.getMessage(),
                    "Erro no banco de dados",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    public void updateListaEstoquePesquisa(String nome) {
        try {
            
            ProdutoController pc = new ProdutoController();
            this.listaEstoque = pc.searchByName(nome);
            
            updateTabelaEstoque();
        } 
        catch (SQLException e) {
            JOptionPane.showMessageDialog(
                    this,
                    e.getMessage(),
                    "Erro no banco de dados",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    private void updateTabelaEstoque() {
            DefaultTableModel modelo = (DefaultTableModel) tabelaProd.getModel();
            modelo.setRowCount(0);

            for (Produto p : this.listaEstoque) {
                modelo.addRow(new Object[]{
                    p.getId(),
                    p.getNome(),
                    p.getDescricao(),
                    p.getPreco(),
                    p.getQuantidade()
                });
            }
    }
    
    // CLIENTE UPDATES
    public void updateListaClientes() {
        try {
            ClienteController cc = new ClienteController();
            this.listaClientes = cc.getAll();
            
            updateTabelaCliente();
        } 
        catch (SQLException e) {
            JOptionPane.showMessageDialog(
                    this,
                    e.getMessage(),
                    "Erro no banco de dados",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    public void updateListaClientesPesquisa(String nome) {
        try {
            
            ClienteController cc = new ClienteController();
            this.listaClientes = cc.searchByName(nome);
            
            updateTabelaCliente();
        } 
        catch (SQLException e) {
            JOptionPane.showMessageDialog(
                    this,
                    e.getMessage(),
                    "Erro no banco de dados",
                    JOptionPane.ERROR_MESSAGE
            );
        }
    }
    
    private void updateTabelaCliente() {
            DefaultTableModel modelo = (DefaultTableModel) tabelaClientes.getModel();
            modelo.setRowCount(0);
            
            
            for (Cliente c : this.listaClientes) {
                modelo.addRow(new Object[]{
                    c.getId(),
                    c.getNome(),
                    c.getSobrenome(),
                    c.getTelefone(),
                    c.getEndereco(),
                    c.getCpf(),
                });
            }
    }

    // CARRINHO UPDATES
    public void updateTabelaCarrinho() {
        DefaultTableModel modelo = (DefaultTableModel) tabelaCarrinho.getModel();
        modelo.setRowCount(0);

        for (Produto p : this.carrinho) {
            modelo.addRow(new Object[]{
                p.getId(),
                p.getNome(),
                p.getDescricao(),
                p.getPreco(),
                0
            });
        }
    }

    private void calcularTotalCarrinho() {
        double total = 0.0;

        for (int i = 0; i < tabelaCarrinho.getRowCount(); i++) {
            Object precoObj = tabelaCarrinho.getValueAt(i, 3);
            Object quantObj = tabelaCarrinho.getValueAt(i, 4);

            if (precoObj != null && quantObj != null) {
                try {
                    double preco = Double.parseDouble(precoObj.toString());
                    int quantidade = Integer.parseInt(quantObj.toString());
                    total += preco * quantidade;
                } catch (NumberFormatException e) {
                    // Ignorar linhas com valores inválidos
                }
            }
        }

        TextoTotal.setText(total+"");
    }

    private List<ItemVenda> getProdutosDaTabela() {
    List<ItemVenda> itens = new ArrayList<>();
    DefaultTableModel modelo = (DefaultTableModel) tabelaCarrinho.getModel();

    for (int i = 0; i < modelo.getRowCount(); i++) {
        try {
            int id = Integer.parseInt(modelo.getValueAt(i, 0).toString());
            double preco = Double.parseDouble(modelo.getValueAt(i, 3).toString());
            int quantidade = Integer.parseInt(modelo.getValueAt(i, 4).toString());

            ItemVenda iv = new ItemVenda(id, quantidade, preco);
            itens.add(iv);

        } catch (Exception e) {
            System.err.println("Erro ao converter linha " + i + ": " + e.getMessage());
        }
    }

    return itens;
}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotaoAddCliente;
    private javax.swing.JButton BotaoAddProd;
    private javax.swing.JButton BotaoAdiconar;
    private javax.swing.JButton BotaoCancelar;
    private javax.swing.JButton BotaoDeletarCliente;
    private javax.swing.JButton BotaoDeletarProd;
    private javax.swing.JButton BotaoEditar;
    private javax.swing.JButton BotaoEditarCliente;
    private javax.swing.JButton BotaoFinalizar;
    private javax.swing.JButton BotaoPesquisar;
    private javax.swing.JButton BotaoPesquisarCliente;
    private javax.swing.JFormattedTextField TextoCPF;
    private javax.swing.JFormattedTextField TextoClienteCPF;
    private javax.swing.JTextField TextoPesquisar;
    private javax.swing.JTextField TextoPesquisar1;
    private javax.swing.JTextField TextoTotal;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tabelaCarrinho;
    private javax.swing.JTable tabelaClientes;
    private javax.swing.JTable tabelaProd;
    private javax.swing.JTable tabelaRegistro;
    // End of variables declaration//GEN-END:variables
}
